spring:
  application:
    name: ${SPRING_APPLICATION_NAME:worli-chattermouth}
  data:
    mongodb:
      host: ${MONGODB_HOST:localhost}
      port: ${MONGODB_PORT:27017}
      database: ${MONGODB_DATABASE:worli}
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:paragbhardwajcs@gmail.com}
    password: ${MAIL_PASSWORD:shcr vuqc kryw vhwc}
    properties:
      mail:
        smtp:
          auth: ${MAIL_SMTP_AUTH:true}
          starttls:
            enable: ${MAIL_SMTP_STARTTLS_ENABLE:true}
            required: ${MAIL_SMTP_STARTTLS_REQUIRED:true}
          connectiontimeout: ${MAIL_SMTP_CONNECTION_TIMEOUT:5000}
          timeout: ${MAIL_SMTP_TIMEOUT:5000}
          writetimeout: ${MAIL_SMTP_WRITE_TIMEOUT:5000}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}  # Kafka broker address, defaults to localhost if not set
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP_ID:my-group-id}             # Consumer group id, defaults to 'my-group-id' if not set
      auto-offset-reset: ${KAFKA_CONSUMER_AUTO_OFFSET_RESET:earliest}  # Start reading from the earliest, defaults to 'earliest'
      key-deserializer: ${KAFKA_CONSUMER_KEY_DESERIALIZER:org.apache.kafka.common.serialization.StringDeserializer}
      value-deserializer: ${KAFKA_CONSUMER_VALUE_DESERIALIZER:org.apache.kafka.common.serialization.StringDeserializer}
    producer:
      key-serializer: ${KAFKA_PRODUCER_KEY_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}
      value-serializer: ${KAFKA_PRODUCER_VALUE_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}

server:
  port: ${SERVER_PORT:8080}


http:
  pool-properties:
    llm-conversational-pool-config:
      maxTotal: ${LLM_CONVERSATIONAL_HTTP_POOL_MAX_TOTAL:100}
      defaultMaxPerRoute: ${LLM_CONVERSATIONAL_HTTP_POOL_DEFAULT_MAX_PER_ROUTE:100}
      connectionTimeout: ${LLM_CONVERSATIONAL_HTTP_POOL_CONNECTION_TIMEOUT:10000}
      socketTimeout: ${LLM_CONVERSATIONAL_HTTP_POOL_SOCKET_TIMEOUT:10000}
      requestTimeout: ${LLM_CONVERSATIONAL_HTTP_POOL_REQUEST_TIMEOUT:10000}
    google-get-token-pool-config:
      maxTotal: ${GOOGLE_GET_TOKEN_HTTP_POOL_MAX_TOTAL:100}
      defaultMaxPerRoute: ${GOOGLE_GET_TOKEN_HTTP_POOL_DEFAULT_MAX_PER_ROUTE:100}
      connectionTimeout: ${GOOGLE_GET_TOKEN_HTTP_POOL_CONNECTION_TIMEOUT:10000}
      socketTimeout: ${GOOGLE_GET_TOKEN_HTTP_POOL_SOCKET_TIMEOUT:10000}
      requestTimeout: ${GOOGLE_GET_TOKEN_HTTP_POOL_REQUEST_TIMEOUT:10000}
    google-get-profile-data-pool-config:
      maxTotal: ${GOOGLE_GET_PROFILE_HTTP_POOL_MAX_TOTAL:100}
      defaultMaxPerRoute: ${GOOGLE_GET_PROFILE_HTTP_POOL_DEFAULT_MAX_PER_ROUTE:100}
      connectionTimeout: ${GOOGLE_GET_PROFILE_HTTP_POOL_CONNECTION_TIMEOUT:10000}
      socketTimeout: ${GOOGLE_GET_PROFILE_HTTP_POOL_SOCKET_TIMEOUT:10000}
      requestTimeout: ${GOOGLE_GET_PROFILE_HTTP_POOL_REQUEST_TIMEOUT:10000}

service:
  config:
    llm-conversational-config:
      url: ${LLM_CONVERSATIONAL_SERVICE_URL:https://api.openai.com/v1/chat/completions}
    google-get-token-config:
      url: ${GOOGLE_GET_TOKEN_API_URL:https://oauth2.googleapis.com/token}
    google-get-profile-config:
      url: ${GOOGLE_GET_PROFILE_CONFIG_URL:https://www.googleapis.com/oauth2/v2/userinfo}

allowed-origins: ${ALLOWED_ORIGINS:*}

mail:
  smtp:
    user: paragbhardwajcs@gmail.com

google:
  client:
    id: ${GOOGLE_CLIENT_ID}
    secret: ${GOOGLE_CLIENT_SECRET}
  redirect-uri: ${GOOGLE_REDIRECT_URI:http://localhost:3000/homepage}
  project-id: ${GOOGLE_PROJECT_ID:coherent-ascent-436020-n2}
  subscription-id: ${GOOGLE_GMAIL_SUBSCRIPTION_ID:gmail-subscription}

openai:
  authorization-value: ${OPENAI_AUTHORIZATION_VALUE}

receiver-worli:
  email: ${RECEIVER_WORLI_EMAIL:paragbhardwajcs@gmail.com}
  email-password: ${RECEIVER_WORLI_PASSWORD}
  activated: ${RECEIVER_WORLI_ACTIVATED}

conversational-model:
  prompt: "NOTE :-\n1. The output should be only in above json format. (No single word should be there except json format output)\n2. Use message_list_by_user for context building.\n\nYou are a chatbot who understands conversation around meetings only and your objective is to extract below variables from the **message_list_by_user** in the json format leaving blank if information is not present (explanation of each key is below the payload) :-\n\n{\n\n“intent” : integer,\n”participants” : list of string,\n”agenda” : string\n\n}\n\n1. intent :- classify the intent of message to below integers :-\n1 if intent is schedule_meeting\n2 if intent is reschedule_meeting\n3 if intent is cancel_meeting\n4 if intent is irrelevant to all the other\n2. participants :- give a list of participants’ emails. The receiver should be excluded from the participant list.\n3. agenda :- what is the agenda of the meeting. ( It should be something meaningful other than just something similar to schedule a meet)\n\n**message_list_by_user** :- (The list below is in chronological order)\n- schedule one meet\n\n**NOTE :-\n1. The output should be only in above json format. (No single word should be there except json format output)\n2. Use message_list_by_user for context building.**"


kafka:
  topic:
    email-receiver: ${TOPIC_NAME_EMAIL_RECEIVER:test-topic}
  listener:
    enabled:
      email-receiver: ${EMAIL_RECEIVER_LISTENER_ENABLED}
